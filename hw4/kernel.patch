diff --git a/fs/Makefile b/fs/Makefile
index 14231b4cf383..58104ff9277f 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -78,6 +78,7 @@ obj-$(CONFIG_JBD2)		+= jbd2/
 obj-$(CONFIG_CRAMFS)		+= cramfs/
 obj-$(CONFIG_SQUASHFS)		+= squashfs/
 obj-y				+= ramfs/
+obj-y				+= seccomfs/
 obj-$(CONFIG_HUGETLBFS)		+= hugetlbfs/
 obj-$(CONFIG_CODA_FS)		+= coda/
 obj-$(CONFIG_MINIX_FS)		+= minix/
diff --git a/fs/seccomfs/Makefile b/fs/seccomfs/Makefile
new file mode 100644
index 000000000000..d60f6ddbb616
--- /dev/null
+++ b/fs/seccomfs/Makefile
@@ -0,0 +1,2 @@
+obj-y += seccomfs.o
+seccomfs-objs += root.o
diff --git a/fs/seccomfs/internal.h b/fs/seccomfs/internal.h
new file mode 100644
index 000000000000..dd261d12e9e2
--- /dev/null
+++ b/fs/seccomfs/internal.h
@@ -0,0 +1,25 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/* Internal procfs definitions
+ *
+ * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.
+ * Written by David Howells (dhowells@redhat.com)
+ */
+#include <linux/fs.h>
+#include <linux/types.h>
+#include <linux/list.h>
+#define ROOT_INO 1
+
+extern int seccomp_set_mode_fs(struct task_struct *task, u64 bitset[8]);
+
+struct seccompfs_log {
+	pid_t pid;
+	int len, cap;
+	char *content;
+	struct list_head list;
+};
+
+struct seccomp_syscalls {
+	pid_t pid;
+	u64 bitset[8];
+};
+
diff --git a/fs/seccomfs/root.c b/fs/seccomfs/root.c
new file mode 100644
index 000000000000..3e8093e3a30a
--- /dev/null
+++ b/fs/seccomfs/root.c
@@ -0,0 +1,345 @@
+// SPDX-License-Identifier: GPL-2.0-only
+#include <linux/fs.h>
+#include <linux/fs_context.h>
+#include <linux/kernel.h>
+#include <linux/magic.h>
+#include <linux/slab.h>
+#include <linux/stat.h>
+#include <linux/string.h>
+#include <linux/time.h>
+#include <linux/uaccess.h>
+#include <uapi/linux/mount.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/seccomp.h>
+#include <linux/filter.h>
+#include <linux/list.h>
+#include <linux/ctype.h>
+#include "internal.h"
+
+static const struct super_operations seccompfs_sops;
+static const struct inode_operations seccompfs_inode_ops;
+static const struct file_operations seccompfs_dir_ops;
+const struct file_operations seccompfs_config_operations;
+const struct file_operations seccompfs_begin_operations;
+const struct file_operations seccompfs_log_operations;
+
+struct seccomp_syscalls seccompfs_filter;
+struct super_block *seccompfs_root;
+
+static struct seccompfs_log log_head;
+
+struct inode *seccompfs_get_inode(struct super_block *sb,
+					const struct inode *dir, umode_t mode)
+{
+	struct inode *inode = new_inode(sb);
+
+	if (inode) {
+		inode->i_ino = get_next_ino();
+		inode->i_atime = current_time(inode);
+		inode->i_mode = mode;
+		switch (mode & S_IFMT) {
+		case S_IFREG:
+			inode->i_op = &seccompfs_inode_ops;
+			inode->i_fop = &seccompfs_log_operations;
+			break;
+		case S_IFDIR:
+			inode->i_op = &seccompfs_inode_ops;
+			inode->i_fop = &simple_dir_operations;
+			break;
+		default:
+			pr_err("seccompfs inode create no such mode\n");
+		}
+	}
+	return inode;
+}
+
+static struct dentry *seccompfs_create_file(struct dentry *root,
+						const char *name, umode_t mode)
+{
+	struct inode *inode;
+	struct dentry *dentry;
+
+	inode_lock(d_inode(root));
+	dentry = d_alloc_name(root, name);
+	inode = seccompfs_get_inode(root->d_sb,
+							d_inode(root), mode);
+	if (!inode) {
+		pr_err("create file get inode error");
+		inode_unlock(d_inode(root));
+	}
+	d_add(dentry, inode);
+	inode_unlock(d_inode(root));
+	/* inode->i_fop = &seccompfs_sops; */
+	return dentry;
+}
+
+void push_record(struct seccompfs_log *log, int syscall, int action)
+{
+	/* TODO: LOCK */
+	char buf[128];
+
+	sprintf(buf, "%d, %x\n", syscall, action);
+	if (strlen(buf) + log->len >= log->cap) {
+		char *new_content = kmalloc(log->cap * 2, GFP_KERNEL);
+
+		memcpy(new_content, log->content, log->cap);
+		kfree(log->content);
+		log->content = new_content;
+		log->cap *= 2;
+	}
+	strcat(log->content, buf);
+	log->len += strlen(buf);
+}
+
+int seccompfs_log_write(pid_t pid, int syscall, int action)
+{
+	struct list_head *head;
+	struct seccompfs_log *ptr;
+
+	/* TODO */
+	pr_info("Get (%d, %d, %x)\n", pid, syscall, action);
+
+	head = &log_head.list;
+	list_for_each_entry(ptr, head, list) {
+		if (ptr->pid == pid) {
+			push_record(ptr, syscall, action);
+			return 0;
+		}
+	}
+	pr_err("Cannot find pid log\n");
+	return -EINVAL;
+}
+
+static ssize_t seccompfs_log_read(struct file *filp,
+			char *buf, size_t count, loff_t *offset)
+{
+	struct list_head *head;
+	struct seccompfs_log *ptr;
+
+	pid_t pid;
+	char path[128];
+
+	char *full_path = dentry_path_raw(filp->f_path.dentry, path, 127);
+
+	int ret = sscanf(full_path, "/%d/log", &pid);
+
+	if (ret != 1)
+		return -EFAULT;
+
+	head = &log_head.list;
+	list_for_each_entry(ptr, head, list) {
+		if (ptr->pid == pid) {
+			int to_copy = ptr->len - *offset;
+
+			if (to_copy <= 0)
+				return 0;
+			if (copy_to_user(buf, ptr->content + *offset, to_copy))
+				return -EFAULT;
+			*offset += to_copy;
+			return to_copy;
+		}
+	}
+
+	return -EFAULT;
+}
+
+
+static ssize_t seccompfs_begin_write(struct file *filep,
+			const char *buf, size_t count, loff_t *offset)
+{
+	struct task_struct *task;
+	char pid_name[1024];
+	struct dentry *dir;
+
+	struct list_head *head;
+	struct seccompfs_log *ptr;
+	struct seccompfs_log *new_log;
+
+	pr_info("[seccomfs] begin write ops\n");
+	task = find_task_by_vpid(seccompfs_filter.pid);
+	if (!task) {
+		pr_info("can't find pid %u\n", seccompfs_filter.pid);
+		return -EFAULT;
+	}
+	sprintf(pid_name, "%u", seccompfs_filter.pid);
+	dir = seccompfs_create_file(seccompfs_root->s_root
+						, pid_name, S_IFDIR | 0500);
+	seccompfs_create_file(dir, "log", S_IFREG | 0400);
+	/* TODO call the seccomfs filter */
+
+	head = &log_head.list;
+	list_for_each_entry(ptr, head, list) {
+		if (ptr->pid == seccompfs_filter.pid) {
+			pr_err("Already attached filter on %d\n", ptr->pid);
+			return -EFAULT;
+		}
+	}
+
+	if (seccomp_set_mode_fs(task, seccompfs_filter.bitset)) {
+		pr_info("FS failed!\n");
+		return -EFAULT;
+	}
+
+	new_log = kmalloc(sizeof(struct seccompfs_log), GFP_KERNEL);
+	new_log->pid = seccompfs_filter.pid;
+	new_log->len = 0;
+	new_log->cap = 4096;
+	new_log->content = kmalloc(4096, GFP_KERNEL);
+	list_add_tail(&new_log->list, &log_head.list);
+
+	return count;
+}
+
+static ssize_t seccompfs_config_write(struct file *filep,
+			const char *buf, size_t count, loff_t *offset)
+{
+	pid_t pid;
+	u64 bitset[8] = {0};
+	long len;
+	int consumed, size, i;
+	char *input;
+
+	pr_info("[seccomfs] config write ops");
+	input = kmalloc(count, GFP_KERNEL);
+	if (copy_from_user(input, buf, count))
+		return -EFAULT;
+	/* parse the input from pid, len, nr1, nr2 .. */
+	/* FIXME */
+	if (sscanf(input, "%u, %lu%n", &(pid),
+							&len, &consumed) != 2) {
+		pr_info("[seccomfs] write format error: len\n");
+		kfree(input);
+		return -EFAULT;
+	}
+	for (i = 0; i < len && *(input+consumed); i++) {
+		int syscall, x;
+
+		if (sscanf(input+consumed, ",%d%n",
+				&syscall, &size) != 1) {
+			pr_info("[seccomfs] write format error: sys\n");
+			kfree(input);
+			return -EFAULT;
+		}
+		x = syscall / 64;
+		if (x >= 0 && x < 8)
+			bitset[x] |= (1ULL << (syscall % 64));
+		consumed += size;
+	}
+	for (i = consumed; i < count; i++) {
+		if (!isspace(*(input+i))) {
+			pr_info("[seccomfs] write format error: exceed\n");
+			kfree(input);
+			return -EFAULT;
+		}
+	}
+	kfree(input);
+
+	/* Success. Write to filter */
+	seccompfs_filter.pid = pid;
+	for (i = 0; i < 8; i++)
+		seccompfs_filter.bitset[i] = bitset[i];
+
+	return count;
+}
+
+const struct file_operations seccompfs_config_operations = {
+	.open = simple_open,
+	.write = seccompfs_config_write,
+};
+
+const struct file_operations seccompfs_begin_operations = {
+	.open = simple_open,
+	.write = seccompfs_begin_write,
+};
+
+const struct file_operations seccompfs_log_operations = {
+	.open = simple_open,
+	.read = seccompfs_log_read,
+};
+
+static int seccompfs_fill_super(struct super_block *sb, struct fs_context *fc)
+{
+	static const struct tree_descr files[] = {
+		{	NULL, NULL, 0},
+		{	.name = "config",
+			.ops = &seccompfs_config_operations,
+			.mode = S_IFREG | 0200 },
+		{	.name = "begin",
+			.ops = &seccompfs_begin_operations,
+			.mode = S_IFREG | 0200 },
+		{	"", NULL, 0}
+	};
+	simple_fill_super(sb, SECCOMFS_MAGIC, files);
+	seccompfs_root = sb;
+
+	return 0;
+}
+
+
+static const struct super_operations seccompfs_sops = {
+	.statfs		= simple_statfs,
+};
+
+struct seccompfs_dir_entry {
+};
+
+static const struct inode_operations seccompfs_inode_ops = {
+	.lookup		= simple_lookup,
+	.getattr	= simple_getattr,
+	.permission	= generic_permission,
+};
+
+static int seccompfs_get_tree(struct fs_context *fc)
+{
+	return get_tree_nodev(fc, seccompfs_fill_super);
+}
+
+static const struct fs_context_operations seccompfs_context_ops = {
+	.get_tree	= seccompfs_get_tree,
+};
+
+static int seccompfs_init_fs_context(struct fs_context *fc)
+{
+	/* TODO find out what is s_fs_info */
+	fc->ops = &seccompfs_context_ops;
+	return 0;
+}
+
+static const struct file_operations seccompfs_dir_ops = {
+	.open		= dcache_dir_open,
+	.release	= dcache_dir_close,
+	.llseek		= dcache_dir_lseek,
+	.read		= generic_read_dir,
+	.iterate_shared	= dcache_readdir,
+	.fsync		= noop_fsync,
+};
+
+static struct file_system_type seccompfs_type = {
+	.name = "seccompfs",
+	.init_fs_context = seccompfs_init_fs_context,
+	.kill_sb = kill_litter_super,
+};
+
+static int __init init_seccompfs(void)
+{
+	int ret;
+	struct vfsmount *mount;
+
+	ret = register_filesystem(&seccompfs_type);
+	if (ret < 0)
+		return ret;
+
+	mount = kern_mount(&seccompfs_type);
+	if (IS_ERR(mount)) {
+		pr_err("kern mount error\n");
+		unregister_filesystem(&seccompfs_type);
+		return PTR_ERR(mount);
+	}
+
+	INIT_LIST_HEAD(&log_head.list);
+
+	return 0;
+}
+
+fs_initcall(init_seccompfs);
diff --git a/include/linux/seccomp.h b/include/linux/seccomp.h
index 84868d37b35d..fc6904405078 100644
--- a/include/linux/seccomp.h
+++ b/include/linux/seccomp.h
@@ -29,6 +29,7 @@ struct seccomp_filter;
 struct seccomp {
 	int mode;
 	struct seccomp_filter *filter;
+	u64 bitset[8];
 };
 
 #ifdef CONFIG_HAVE_ARCH_SECCOMP_FILTER
diff --git a/include/uapi/linux/magic.h b/include/uapi/linux/magic.h
index 903cc2d2750b..f0a1c33a7bc8 100644
--- a/include/uapi/linux/magic.h
+++ b/include/uapi/linux/magic.h
@@ -14,6 +14,7 @@
 #define SELINUX_MAGIC		0xf97cff8c
 #define SMACK_MAGIC		0x43415d53	/* "SMAC" */
 #define RAMFS_MAGIC		0x858458f6	/* some random number */
+#define SECCOMFS_MAGIC		0x85840000	/* some random number */
 #define TMPFS_MAGIC		0x01021994
 #define HUGETLBFS_MAGIC 	0x958458f6	/* some random number */
 #define SQUASHFS_MAGIC		0x73717368
diff --git a/include/uapi/linux/seccomp.h b/include/uapi/linux/seccomp.h
index 90734aa5aa36..a069c4f02f20 100644
--- a/include/uapi/linux/seccomp.h
+++ b/include/uapi/linux/seccomp.h
@@ -10,6 +10,7 @@
 #define SECCOMP_MODE_DISABLED	0 /* seccomp is not in use. */
 #define SECCOMP_MODE_STRICT	1 /* uses hard-coded filter. */
 #define SECCOMP_MODE_FILTER	2 /* uses user-supplied filter. */
+#define SECCOMP_MODE_FILE	3 /* uses file system filter. */
 
 /* Valid operations for seccomp syscall. */
 #define SECCOMP_SET_MODE_STRICT		0
@@ -56,6 +57,10 @@
  * @args: up to 6 system call arguments always stored as 64-bit values
  *        regardless of the architecture.
  */
+
+extern int seccompfs_run_filter(int this_syscall);
+extern int seccompfs_log_write(pid_t pid, int syscall, int action);
+
 struct seccomp_data {
 	int nr;
 	__u32 arch;
diff --git a/kernel/seccomp.c b/kernel/seccomp.c
index dba52a7db5e8..989996c2e799 100644
--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@ -703,6 +703,28 @@ static void __secure_computing_strict(int this_syscall)
 	do_exit(SIGKILL);
 }
 
+static int __seccomp_file(int this_syscall)
+{
+	int x, y, action;
+	u64 passed = 0;
+
+	x = this_syscall / 64;
+	y = this_syscall % 64;
+	if (x >= 0 && x < 8)
+		passed = current->seccomp.bitset[x] & (1ULL << y);
+	action = passed ? SECCOMP_RET_ALLOW : SECCOMP_RET_KILL_THREAD;
+
+	seccompfs_log_write(current->pid, this_syscall, action);
+
+	if (action == SECCOMP_RET_KILL_THREAD) {
+		seccomp_log(this_syscall, SIGKILL,
+			SECCOMP_RET_KILL_THREAD, true);
+		do_exit(SIGKILL);
+	}
+
+	return 0;
+}
+
 #ifndef CONFIG_HAVE_ARCH_SECCOMP_FILTER
 void secure_computing_strict(int this_syscall)
 {
@@ -935,6 +957,8 @@ int __secure_computing(const struct seccomp_data *sd)
 		return 0;
 	case SECCOMP_MODE_FILTER:
 		return __seccomp_filter(this_syscall, sd, false);
+	case SECCOMP_MODE_FILE:
+		return __seccomp_file(this_syscall);
 	default:
 		BUG();
 	}
@@ -1801,6 +1825,51 @@ static int __init seccomp_sysctl_init(void)
 	return 0;
 }
 
+static inline void seccomp_assign_config(struct task_struct *task,
+						int seccomp_mode, u64 bitset[8])
+{
+	int i;
+
+	assert_spin_locked(&task->sighand->siglock);
+
+	task->seccomp.mode = seccomp_mode;
+
+	for (i = 0; i < 8; i++)
+		task->seccomp.bitset[i] = bitset[i];
+
+	/*
+	 * Make sure TIF_SECCOMP cannot be set before the mode (and
+	 * filter) is set.
+	 */
+	smp_mb__before_atomic();
+	arch_seccomp_spec_mitigate(task);
+	set_tsk_thread_flag(task, TIF_SECCOMP);
+}
+
+long seccomp_set_mode_fs(struct task_struct *task, u64 bitset[8])
+{
+	const unsigned long seccomp_mode = SECCOMP_MODE_FILE;
+	long ret = -EINVAL;
+
+	spin_lock_irq(&task->sighand->siglock);
+
+	assert_spin_locked(&task->sighand->siglock);
+
+	if (task->seccomp.mode && task->seccomp.mode != seccomp_mode)
+		goto out;
+
+#ifdef TIF_NOTSC
+	disable_TSC();
+#endif
+	seccomp_assign_config(task, seccomp_mode, bitset);
+	ret = 0;
+
+out:
+	spin_unlock_irq(&task->sighand->siglock);
+
+	return ret;
+}
+
 device_initcall(seccomp_sysctl_init)
 
 #endif /* CONFIG_SYSCTL */
